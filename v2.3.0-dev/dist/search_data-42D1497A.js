searchData={"items":[{"type":"task","title":"mix certs.dev","doc":"Generate fake certs (placeholders) for `HTTPS` endpoint and `APNS` service.\n\nPlease be aware that `APNS` requires valid Apple Developer certificates, so it\nwill not accept those fake certificates. Generated certificates may be used\nonly with mock APNS service (like one provided by docker\n`mobify/apns-http2-mock-server`).","ref":"Mix.Tasks.Certs.Dev.html"},{"type":"function","title":"Mix.Tasks.Certs.Dev.run/1","doc":"Callback implementation for  Mix.Task.run/1 .","ref":"Mix.Tasks.Certs.Dev.html#run/1"},{"type":"task","title":"mix gh_pages_docs","doc":"Task for updating existing documentation version published on GH Pages.","ref":"Mix.Tasks.GhPagesDocs.html"},{"type":"function","title":"Mix.Tasks.GhPagesDocs.run/1","doc":"Callback implementation for  Mix.Task.run/1 .","ref":"Mix.Tasks.GhPagesDocs.html#run/1"},{"type":"task","title":"mix test.env.down","doc":"","ref":"Mix.Tasks.Test.Env.Down.html"},{"type":"function","title":"Mix.Tasks.Test.Env.Down.run/1","doc":"Callback implementation for  Mix.Task.run/1 .","ref":"Mix.Tasks.Test.Env.Down.html#run/1"},{"type":"task","title":"mix test.env.up","doc":"","ref":"Mix.Tasks.Test.Env.Up.html"},{"type":"function","title":"Mix.Tasks.Test.Env.Up.run/1","doc":"Callback implementation for  Mix.Task.run/1 .","ref":"Mix.Tasks.Test.Env.Up.html#run/1"},{"type":"task","title":"mix test.env.utils","doc":"","ref":"Mix.Tasks.Test.Env.Utils.html"},{"type":"function","title":"Mix.Tasks.Test.Env.Utils.compose/2","doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#compose/2"},{"type":"function","title":"Mix.Tasks.Test.Env.Utils.flunk/1","doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#flunk/1"},{"type":"function","title":"Mix.Tasks.Test.Env.Utils.wait_for_services/1","doc":"","ref":"Mix.Tasks.Test.Env.Utils.html#wait_for_services/1"},{"type":"task","title":"mix test.env.wait","doc":"","ref":"Mix.Tasks.Test.Env.Wait.html"},{"type":"function","title":"Mix.Tasks.Test.Env.Wait.run/1","doc":"Callback implementation for  Mix.Task.run/1 .","ref":"Mix.Tasks.Test.Env.Wait.html#run/1"},{"type":"module","title":"MongoosePush","doc":"MongoosePush is simple (seriously) service providing ability to send push\nnotification to `FCM` (Firebase Cloud Messaging) and/or\n`APNS` (Apple Push Notification Service). What makes it cool is not only\nsimplicity but also support for newest and fastest `HTTP/2` based APIs\nfor both services.\n\nAt this moment only those two services are supported but in future\nMongoosePush may and probably will support even more Push Notification Services.","ref":"MongoosePush.html"},{"type":"type","title":"MongoosePush.alert/0","doc":"","ref":"MongoosePush.html#t:alert/0"},{"type":"type","title":"MongoosePush.alert_key/0","doc":"","ref":"MongoosePush.html#t:alert_key/0"},{"type":"type","title":"MongoosePush.data/0","doc":"","ref":"MongoosePush.html#t:data/0"},{"type":"type","title":"MongoosePush.data_key/0","doc":"","ref":"MongoosePush.html#t:data_key/0"},{"type":"type","title":"MongoosePush.error/0","doc":"","ref":"MongoosePush.html#t:error/0"},{"type":"type","title":"MongoosePush.mode/0","doc":"","ref":"MongoosePush.html#t:mode/0"},{"type":"function","title":"MongoosePush.push/2","doc":"Push notification defined by `request` to device with `device_id`.\n`request` has to define at least `:service` type (`:fcm` or `:apns`) and\nat least one of `:alert` or `:data`. If `alert` is not present, the notification will be send as 'silent'.\nPlease refer to yours push notification service provider's documentation for more details on\nsilent notifications.\n\nField `:data` may contain any custom data that have to be delivered to the target device, while\nfield `:alert`, if present, must contain at least `:title` and `:body`. The `:alert` field may also\ncontain: :sound, `:tag` (option specific to FCM service), `:topic` and `:bagde` (specific to APNS).\nPlease consult push notification service provider's documentation for more informations on those\noptional fields.\n\nField `:priority` may be used to set priority for message on both FCM and APNS. The values are\nnative for FCM and for APNS - :normal is \"5\" and :high is 10.\n\n`:mode` option is also specific to APNS but it only selects appropriate\nworker pool (with `:mode` set to either `:prod` or `:dev`).\nDefault value to `:mode` is `:prod`.\n\nField `:mutable_content` (specific to APNS) can be set to `true` (by default `false`) to enable\nthis feature (please consult APNS documentation for more information).","ref":"MongoosePush.html#push/2"},{"type":"type","title":"MongoosePush.req_key/0","doc":"Available keys in `request` map","ref":"MongoosePush.html#t:req_key/0"},{"type":"type","title":"MongoosePush.request/0","doc":"Raw push request. The keys: `:service` and at least one of `:alert` or `:body` are required","ref":"MongoosePush.html#t:request/0"},{"type":"type","title":"MongoosePush.service/0","doc":"","ref":"MongoosePush.html#t:service/0"},{"type":"module","title":"MongoosePushWeb.HealthcheckController","doc":"","ref":"MongoosePushWeb.HealthcheckController.html"},{"type":"function","title":"MongoosePushWeb.HealthcheckController.send/2","doc":"","ref":"MongoosePushWeb.HealthcheckController.html#send/2"},{"type":"behaviour","title":"MongoosePush.API","doc":"","ref":"MongoosePush.API.html"},{"type":"callback","title":"MongoosePush.API.to_status/1","doc":"","ref":"MongoosePush.API.html#c:to_status/1"},{"type":"module","title":"MongoosePush.API.V1.ResponseEncoder","doc":"Module for handling internal responses to V1 HTTP2 codes","ref":"MongoosePush.API.V1.ResponseEncoder.html"},{"type":"function","title":"MongoosePush.API.V1.ResponseEncoder.to_status/1","doc":"Callback implementation for  MongoosePush.API.to_status/1 .","ref":"MongoosePush.API.V1.ResponseEncoder.html#to_status/1"},{"type":"module","title":"MongoosePush.API.V2.ResponseEncoder","doc":"Module for handling internal responses to V2 HTTP2 codes","ref":"MongoosePush.API.V2.ResponseEncoder.html"},{"type":"function","title":"MongoosePush.API.V2.ResponseEncoder.to_status/1","doc":"Callback implementation for  MongoosePush.API.to_status/1 .","ref":"MongoosePush.API.V2.ResponseEncoder.html#to_status/1"},{"type":"module","title":"MongoosePush.API.V3.ResponseEncoder","doc":"Module for handling internal responses to V3 HTTP2 codes","ref":"MongoosePush.API.V3.ResponseEncoder.html"},{"type":"function","title":"MongoosePush.API.V3.ResponseEncoder.to_status/1","doc":"Callback implementation for  MongoosePush.API.to_status/1 .","ref":"MongoosePush.API.V3.ResponseEncoder.html#to_status/1"},{"type":"module","title":"MongoosePush.Config.Utils","doc":"","ref":"MongoosePush.Config.Utils.html"},{"type":"function","title":"MongoosePush.Config.Utils.parse_bind_addr/1","doc":"Used by `prod.exs` to parse env variables to inet-style IP addresses","ref":"MongoosePush.Config.Utils.html#parse_bind_addr/1"},{"type":"module","title":"MongoosePush.Logger.Common","doc":"Common logs formatters' helper functions","ref":"MongoosePush.Logger.Common.html"},{"type":"function","title":"MongoosePush.Logger.Common.flatten_metadata/1","doc":"","ref":"MongoosePush.Logger.Common.html#flatten_metadata/1"},{"type":"module","title":"MongoosePush.Logger.JSON","doc":"Module responsible for JSON-specific logs formatting","ref":"MongoosePush.Logger.JSON.html"},{"type":"function","title":"MongoosePush.Logger.JSON.format/4","doc":"","ref":"MongoosePush.Logger.JSON.html#format/4"},{"type":"module","title":"MongoosePush.Logger.LogFmt","doc":"Module responsible for FMT-specific logs formatting","ref":"MongoosePush.Logger.LogFmt.html"},{"type":"function","title":"MongoosePush.Logger.LogFmt.format/4","doc":"","ref":"MongoosePush.Logger.LogFmt.html#format/4"},{"type":"module","title":"MongoosePush.Metrics.TelemetryMetrics","doc":"Module responsible for updating `Telemetry` metrics","ref":"MongoosePush.Metrics.TelemetryMetrics.html"},{"type":"function","title":"MongoosePush.Metrics.TelemetryMetrics.child_spec/1","doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#child_spec/1"},{"type":"function","title":"MongoosePush.Metrics.TelemetryMetrics.metrics/0","doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#metrics/0"},{"type":"function","title":"MongoosePush.Metrics.TelemetryMetrics.periodic_measurements/0","doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#periodic_measurements/0"},{"type":"function","title":"MongoosePush.Metrics.TelemetryMetrics.pooler/0","doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#pooler/0"},{"type":"function","title":"MongoosePush.Metrics.TelemetryMetrics.running_pools/0","doc":"","ref":"MongoosePush.Metrics.TelemetryMetrics.html#running_pools/0"},{"type":"behaviour","title":"MongoosePush.Service","doc":"Generic interface for push notifications services.","ref":"MongoosePush.Service.html"},{"type":"callback","title":"MongoosePush.Service.choose_pool/2","doc":"","ref":"MongoosePush.Service.html#c:choose_pool/2"},{"type":"type","title":"MongoosePush.Service.error/0","doc":"Error tuple with unified internal representation and exact reason returned by service","ref":"MongoosePush.Service.html#t:error/0"},{"type":"type","title":"MongoosePush.Service.error_reason/0","doc":"","ref":"MongoosePush.Service.html#t:error_reason/0"},{"type":"type","title":"MongoosePush.Service.error_type/0","doc":"","ref":"MongoosePush.Service.html#t:error_type/0"},{"type":"type","title":"MongoosePush.Service.notification/0","doc":"","ref":"MongoosePush.Service.html#t:notification/0"},{"type":"type","title":"MongoosePush.Service.options/0","doc":"","ref":"MongoosePush.Service.html#t:options/0"},{"type":"callback","title":"MongoosePush.Service.prepare_notification/3","doc":"","ref":"MongoosePush.Service.html#c:prepare_notification/3"},{"type":"callback","title":"MongoosePush.Service.push/4","doc":"","ref":"MongoosePush.Service.html#c:push/4"},{"type":"callback","title":"MongoosePush.Service.supervisor_entry/1","doc":"","ref":"MongoosePush.Service.html#c:supervisor_entry/1"},{"type":"module","title":"MongoosePush.Service.APNS","doc":"APNS (apple Push Notification Service) service provider implementation.","ref":"MongoosePush.Service.APNS.html"},{"type":"function","title":"MongoosePush.Service.APNS.choose_pool/2","doc":"Callback implementation for  MongoosePush.Service.choose_pool/2 .","ref":"MongoosePush.Service.APNS.html#choose_pool/2"},{"type":"function","title":"MongoosePush.Service.APNS.prepare_notification/3","doc":"Callback implementation for  MongoosePush.Service.prepare_notification/3 .","ref":"MongoosePush.Service.APNS.html#prepare_notification/3"},{"type":"function","title":"MongoosePush.Service.APNS.push/4","doc":"Callback implementation for  MongoosePush.Service.push/4 .","ref":"MongoosePush.Service.APNS.html#push/4"},{"type":"function","title":"MongoosePush.Service.APNS.supervisor_entry/1","doc":"Callback implementation for  MongoosePush.Service.supervisor_entry/1 .","ref":"MongoosePush.Service.APNS.html#supervisor_entry/1"},{"type":"function","title":"MongoosePush.Service.APNS.unify_error/1","doc":"","ref":"MongoosePush.Service.APNS.html#unify_error/1"},{"type":"module","title":"MongoosePush.Service.APNS.ErrorHandler","doc":"Module responsible for handling errors returned by APNS service","ref":"MongoosePush.Service.APNS.ErrorHandler.html"},{"type":"function","title":"MongoosePush.Service.APNS.ErrorHandler.translate_error_reason/1","doc":"","ref":"MongoosePush.Service.APNS.ErrorHandler.html#translate_error_reason/1"},{"type":"module","title":"MongoosePush.Service.APNS.State","doc":"Module for storing state of apns APNS configurations, namely default topics","ref":"MongoosePush.Service.APNS.State.html"},{"type":"function","title":"MongoosePush.Service.APNS.State.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"MongoosePush.Service.APNS.State.html#child_spec/1"},{"type":"function","title":"MongoosePush.Service.APNS.State.get_default_topic/1","doc":"","ref":"MongoosePush.Service.APNS.State.html#get_default_topic/1"},{"type":"function","title":"MongoosePush.Service.APNS.State.start_link/1","doc":"","ref":"MongoosePush.Service.APNS.State.html#start_link/1"},{"type":"module","title":"MongoosePush.Service.APNS.Supervisor","doc":"APNS module supervising Sparrow's PoolSupervisor and APNS State","ref":"MongoosePush.Service.APNS.Supervisor.html"},{"type":"function","title":"MongoosePush.Service.APNS.Supervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"MongoosePush.Service.APNS.Supervisor.html#child_spec/1"},{"type":"function","title":"MongoosePush.Service.APNS.Supervisor.start_link/1","doc":"","ref":"MongoosePush.Service.APNS.Supervisor.html#start_link/1"},{"type":"module","title":"MongoosePush.Service.FCM","doc":"FCM (Firebase Cloud Messaging) service provider implementation.","ref":"MongoosePush.Service.FCM.html"},{"type":"function","title":"MongoosePush.Service.FCM.choose_pool/2","doc":"Callback implementation for  MongoosePush.Service.choose_pool/2 .","ref":"MongoosePush.Service.FCM.html#choose_pool/2"},{"type":"function","title":"MongoosePush.Service.FCM.prepare_notification/3","doc":"Callback implementation for  MongoosePush.Service.prepare_notification/3 .","ref":"MongoosePush.Service.FCM.html#prepare_notification/3"},{"type":"function","title":"MongoosePush.Service.FCM.push/4","doc":"Callback implementation for  MongoosePush.Service.push/4 .","ref":"MongoosePush.Service.FCM.html#push/4"},{"type":"function","title":"MongoosePush.Service.FCM.supervisor_entry/1","doc":"Callback implementation for  MongoosePush.Service.supervisor_entry/1 .","ref":"MongoosePush.Service.FCM.html#supervisor_entry/1"},{"type":"function","title":"MongoosePush.Service.FCM.unify_error/1","doc":"","ref":"MongoosePush.Service.FCM.html#unify_error/1"},{"type":"module","title":"MongoosePush.Service.FCM.ErrorHandler","doc":"Module responsible for handling errors returned by FCM service.","ref":"MongoosePush.Service.FCM.ErrorHandler.html"},{"type":"function","title":"MongoosePush.Service.FCM.ErrorHandler.translate_error_reason/1","doc":"","ref":"MongoosePush.Service.FCM.ErrorHandler.html#translate_error_reason/1"},{"type":"module","title":"MongoosePush.Service.FCM.Pool.Supervisor","doc":"This module is responsible for setting up Sparrow's FCM Supervisor","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html"},{"type":"function","title":"MongoosePush.Service.FCM.Pool.Supervisor.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html#child_spec/1"},{"type":"function","title":"MongoosePush.Service.FCM.Pool.Supervisor.start_link/1","doc":"","ref":"MongoosePush.Service.FCM.Pool.Supervisor.html#start_link/1"},{"type":"module","title":"MongoosePush.Service.FCM.Pools","doc":"This module is responsible for worker pools management. It provides several\nutility functions that help with e.g. selecting workers for given pool of the\nservice.","ref":"MongoosePush.Service.FCM.Pools.html"},{"type":"function","title":"MongoosePush.Service.FCM.Pools.pool_size/2","doc":"Returns size of the pool","ref":"MongoosePush.Service.FCM.Pools.html#pool_size/2"},{"type":"function","title":"MongoosePush.Service.FCM.Pools.pools_by_mode/0","doc":"Returns lists of pool names that have selected `:mode` set","ref":"MongoosePush.Service.FCM.Pools.html#pools_by_mode/0"},{"type":"function","title":"MongoosePush.Service.FCM.Pools.select_worker/0","doc":"Return random worker name for given service and with given `:mode` set","ref":"MongoosePush.Service.FCM.Pools.html#select_worker/0"},{"type":"function","title":"MongoosePush.Service.FCM.Pools.worker_name/3","doc":"Returns worker name based of the service type, worker name and its id","ref":"MongoosePush.Service.FCM.Pools.html#worker_name/3"},{"type":"module","title":"MongoosePushWeb","doc":"The entrypoint for defining your web interface, such\nas controllers, views, channels and so on.\n\nThis can be used in your application as:\n\n    use MongoosePushWeb, :controller\n    use MongoosePushWeb, :view\n\nThe definitions below will be executed for every view,\ncontroller, etc, so keep them short and clean, focused\non imports, uses and aliases.\n\nDo NOT define functions inside the quoted expressions\nbelow. Instead, define any helper function in modules\nand import those modules here.","ref":"MongoosePushWeb.html"},{"type":"macro","title":"MongoosePushWeb.__using__/1","doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"MongoosePushWeb.html#__using__/1"},{"type":"function","title":"MongoosePushWeb.controller/0","doc":"","ref":"MongoosePushWeb.html#controller/0"},{"type":"function","title":"MongoosePushWeb.router/0","doc":"","ref":"MongoosePushWeb.html#router/0"},{"type":"module","title":"MongoosePushWeb.APIv1.NotificationController","doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html"},{"type":"function","title":"MongoosePushWeb.APIv1.NotificationController.open_api_operation/1","doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#open_api_operation/1"},{"type":"function","title":"MongoosePushWeb.APIv1.NotificationController.send/2","doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#send/2"},{"type":"function","title":"MongoosePushWeb.APIv1.NotificationController.send_operation/0","doc":"","ref":"MongoosePushWeb.APIv1.NotificationController.html#send_operation/0"},{"type":"module","title":"MongoosePushWeb.APIv2.NotificationController","doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html"},{"type":"function","title":"MongoosePushWeb.APIv2.NotificationController.open_api_operation/1","doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#open_api_operation/1"},{"type":"function","title":"MongoosePushWeb.APIv2.NotificationController.send/2","doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#send/2"},{"type":"function","title":"MongoosePushWeb.APIv2.NotificationController.send_operation/0","doc":"","ref":"MongoosePushWeb.APIv2.NotificationController.html#send_operation/0"},{"type":"module","title":"MongoosePushWeb.APIv3.NotificationController","doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html"},{"type":"function","title":"MongoosePushWeb.APIv3.NotificationController.open_api_operation/1","doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#open_api_operation/1"},{"type":"function","title":"MongoosePushWeb.APIv3.NotificationController.send/2","doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#send/2"},{"type":"function","title":"MongoosePushWeb.APIv3.NotificationController.send_operation/0","doc":"","ref":"MongoosePushWeb.APIv3.NotificationController.html#send_operation/0"},{"type":"module","title":"MongoosePushWeb.ApiSpec","doc":"","ref":"MongoosePushWeb.ApiSpec.html"},{"type":"module","title":"MongoosePushWeb.Endpoint","doc":"","ref":"MongoosePushWeb.Endpoint.html"},{"type":"function","title":"MongoosePushWeb.Endpoint.broadcast/3","doc":"Callback implementation for  Phoenix.Endpoint.broadcast/3 .","ref":"MongoosePushWeb.Endpoint.html#broadcast/3"},{"type":"function","title":"MongoosePushWeb.Endpoint.broadcast!/3","doc":"Callback implementation for  Phoenix.Endpoint.broadcast!/3 .","ref":"MongoosePushWeb.Endpoint.html#broadcast!/3"},{"type":"function","title":"MongoosePushWeb.Endpoint.broadcast_from/4","doc":"Callback implementation for  Phoenix.Endpoint.broadcast_from/4 .","ref":"MongoosePushWeb.Endpoint.html#broadcast_from/4"},{"type":"function","title":"MongoosePushWeb.Endpoint.broadcast_from!/4","doc":"Callback implementation for  Phoenix.Endpoint.broadcast_from!/4 .","ref":"MongoosePushWeb.Endpoint.html#broadcast_from!/4"},{"type":"function","title":"MongoosePushWeb.Endpoint.call/2","doc":"Callback implementation for  Plug.call/2 .","ref":"MongoosePushWeb.Endpoint.html#call/2"},{"type":"function","title":"MongoosePushWeb.Endpoint.child_spec/1","doc":"Returns the child specification to start the endpoint\nunder a supervision tree.","ref":"MongoosePushWeb.Endpoint.html#child_spec/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.config/2","doc":"Returns the endpoint configuration for `key`\n\nReturns `default` if the key does not exist.","ref":"MongoosePushWeb.Endpoint.html#config/2"},{"type":"function","title":"MongoosePushWeb.Endpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"MongoosePushWeb.Endpoint.html#config_change/2"},{"type":"function","title":"MongoosePushWeb.Endpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"MongoosePushWeb.Endpoint.html#host/0"},{"type":"function","title":"MongoosePushWeb.Endpoint.init/1","doc":"Callback implementation for  Plug.init/1 .","ref":"MongoosePushWeb.Endpoint.html#init/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.local_broadcast/3","doc":"Callback implementation for  Phoenix.Endpoint.local_broadcast/3 .","ref":"MongoosePushWeb.Endpoint.html#local_broadcast/3"},{"type":"function","title":"MongoosePushWeb.Endpoint.local_broadcast_from/4","doc":"Callback implementation for  Phoenix.Endpoint.local_broadcast_from/4 .","ref":"MongoosePushWeb.Endpoint.html#local_broadcast_from/4"},{"type":"function","title":"MongoosePushWeb.Endpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"MongoosePushWeb.Endpoint.html#path/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.script_name/0","doc":"Generates the script name.","ref":"MongoosePushWeb.Endpoint.html#script_name/0"},{"type":"function","title":"MongoosePushWeb.Endpoint.server_info/1","doc":"Returns the address and port that the server is running on","ref":"MongoosePushWeb.Endpoint.html#server_info/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.start_link/1","doc":"Starts the endpoint supervision tree.\n\nAll other options are merged into the endpoint configuration.","ref":"MongoosePushWeb.Endpoint.html#start_link/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file\nin `priv/static`. Meant to be used for Subresource Integrity with CDNs.","ref":"MongoosePushWeb.Endpoint.html#static_integrity/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the `static_path`\nand the second item being the `static_integrity`.","ref":"MongoosePushWeb.Endpoint.html#static_lookup/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.static_path/1","doc":"Generates a route to a static file in `priv/static`.","ref":"MongoosePushWeb.Endpoint.html#static_path/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.static_url/0","doc":"Generates the static URL without any path information.\n\nIt uses the configuration under `:static_url` to generate\nsuch. It falls back to `:url` if `:static_url` is not set.","ref":"MongoosePushWeb.Endpoint.html#static_url/0"},{"type":"function","title":"MongoosePushWeb.Endpoint.struct_url/0","doc":"Generates the endpoint base URL but as a `URI` struct.\n\nIt uses the configuration under `:url` to generate such.\nUseful for manipulating the URL data and passing it to\nURL helpers.","ref":"MongoosePushWeb.Endpoint.html#struct_url/0"},{"type":"function","title":"MongoosePushWeb.Endpoint.subscribe/2","doc":"Callback implementation for  Phoenix.Endpoint.subscribe/2 .","ref":"MongoosePushWeb.Endpoint.html#subscribe/2"},{"type":"function","title":"MongoosePushWeb.Endpoint.unsubscribe/1","doc":"Callback implementation for  Phoenix.Endpoint.unsubscribe/1 .","ref":"MongoosePushWeb.Endpoint.html#unsubscribe/1"},{"type":"function","title":"MongoosePushWeb.Endpoint.url/0","doc":"Generates the endpoint base URL without any path information.\n\nIt uses the configuration under `:url` to generate such.","ref":"MongoosePushWeb.Endpoint.html#url/0"},{"type":"module","title":"MongoosePushWeb.PrometheusMetricsController","doc":"","ref":"MongoosePushWeb.PrometheusMetricsController.html"},{"type":"function","title":"MongoosePushWeb.PrometheusMetricsController.send/2","doc":"","ref":"MongoosePushWeb.PrometheusMetricsController.html#send/2"},{"type":"module","title":"MongoosePushWeb.Router","doc":"","ref":"MongoosePushWeb.Router.html"},{"type":"function","title":"MongoosePushWeb.Router.api/2","doc":"","ref":"MongoosePushWeb.Router.html#api/2"},{"type":"function","title":"MongoosePushWeb.Router.call/2","doc":"Callback invoked by Plug on every request.","ref":"MongoosePushWeb.Router.html#call/2"},{"type":"function","title":"MongoosePushWeb.Router.init/1","doc":"Callback required by Plug that initializes the router\nfor serving web requests.","ref":"MongoosePushWeb.Router.html#init/1"},{"type":"function","title":"MongoosePushWeb.Router.swagger_json/2","doc":"","ref":"MongoosePushWeb.Router.html#swagger_json/2"},{"type":"module","title":"MongoosePushWeb.Plug.CastAndValidate","doc":"Module plug that serves as a wrapper for OpenApiSpex.Plug.CastAndValidate plug,\nto overcome difficulties with proper message validating. For more details,\nplease refer to update_schema_and_do_call/2 function comment.","ref":"MongoosePushWeb.Plug.CastAndValidate.html"},{"type":"function","title":"MongoosePushWeb.Plug.CastAndValidate.update_schema/3","doc":"","ref":"MongoosePushWeb.Plug.CastAndValidate.html#update_schema/3"},{"type":"module","title":"MongoosePushWeb.Plug.CastAndValidate.StubAdapter","doc":"Module which is an almost empty Plug.Conn.Adapter behavior implementation.\nIt is used by the MongoosePushWeb.Plug.CastAndValidate plug\nas part of the workaround this module introduces.","ref":"MongoosePushWeb.Plug.CastAndValidate.StubAdapter.html"},{"type":"module","title":"MongoosePushWeb.Plug.MaybePutSwaggerUI","doc":"","ref":"MongoosePushWeb.Plug.MaybePutSwaggerUI.html"},{"type":"module","title":"MongoosePushWeb.Plug.MaybeRenderSpec","doc":"","ref":"MongoosePushWeb.Plug.MaybeRenderSpec.html"},{"type":"protocol","title":"MongoosePushWeb.Protocols.RequestDecoder","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoder.html"},{"type":"function","title":"MongoosePushWeb.Protocols.RequestDecoder.decode/1","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoder.html#decode/1"},{"type":"type","title":"MongoosePushWeb.Protocols.RequestDecoder.t/0","doc":"All the types that implement this protocol.","ref":"MongoosePushWeb.Protocols.RequestDecoder.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Protocols.RequestDecoderHelper","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html"},{"type":"function","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.add_optional_fields/2","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#add_optional_fields/2"},{"type":"function","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.maybe_parse_to_atom/2","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#maybe_parse_to_atom/2"},{"type":"function","title":"MongoosePushWeb.Protocols.RequestDecoderHelper.parse_service/1","doc":"","ref":"MongoosePushWeb.Protocols.RequestDecoderHelper.html#parse_service/1"},{"type":"module","title":"MongoosePushWeb.Schemas","doc":"","ref":"MongoosePushWeb.Schemas.html"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.alert/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#alert/0"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.base/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#base/0"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.data/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.html#data/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification","doc":"Request.SendNotification.Deep.AlertNotification\n\nIn this request alert field is mandatory.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.AlertNotification.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert","doc":"Request.SendNotification.Deep.Common.Alert\n\nSchema representation of alert.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Alert.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data","doc":"Request.SendNotification.Deep.Common.Data\n\nCustom key-values pairs of the message's payload. The FCM request with nested data can end up with error.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.Common.Data.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification","doc":"Request.SendNotification.Deep.MixedNotification\n\nIn this request both alert and data fields are mandatory.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.MixedNotification.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification","doc":"Request.SendNotification.Deep.SilentNotification\n\nIn this request data field is mandatory.","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.Deep.SilentNotification.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification","doc":"Request.SendNotification.FlatNotification\n\nPush notification request schema","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Request.SendNotification.FlatNotification.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError","doc":"Response.SendNotification.GenericError\n\nResponse schema for push notification request","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.GenericError.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone","doc":"Response.SendNotification.Gone\n\nThe response sent when the requested content has been permanently deleted from server, with no forwarding address","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.Gone.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge","doc":"Response.SendNotification.PayloadTooLarge\n\nResponse schema for push notification request","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.PayloadTooLarge.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable","doc":"Response.SendNotification.ServiceUnavailable\n\nThe server is not ready to handle the request","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.ServiceUnavailable.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests","doc":"Response.SendNotification.TooManyRequests\n\nThe user has sent too many requests in a given amount of time","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.TooManyRequests.html#t:t/0"},{"type":"module","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError","doc":"Response.SendNotification.UnknownError\n\nThe server returned an empty, unknown, or unexplained response","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html"},{"type":"function","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.schema/0","doc":"Callback implementation for  OpenApiSpex.Schema.schema/0 .","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html#schema/0"},{"type":"type","title":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.t/0","doc":"","ref":"MongoosePushWeb.Schemas.Response.SendNotification.UnknownError.html#t:t/0"},{"type":"extras","title":"Introduction","doc":"# MongoosePush\n\n[![CircleCI](https://circleci.com/gh/esl/MongoosePush.svg?style=shield)](https://app.circleci.com/pipelines/github/esl/MongoosePush?branch=master) [![Coverage Status](https://coveralls.io/repos/github/esl/MongoosePush/badge.svg?branch=master)](https://coveralls.io/github/esl/MongoosePush?branch=master)\n\n**MongoosePush** is a simple, **RESTful** service written in **Elixir**, providing the ability to **send push\nnotifications** to `FCM` (Firebase Cloud Messaging) and/or\n`APNS` (Apple Push Notification Service) via their `HTTP/2` API.","ref":"readme.html"},{"type":"extras","title":"Documentation - Introduction","doc":"Documentation is available at: https://esl.github.io/MongoosePush\n\n\n# Quick start","ref":"readme.html#documentation"},{"type":"extras","title":"Running from DockerHub - Introduction","doc":"We provide prebuilt MongoosePush images. Configuration requires either an FCM token, APNS certificates or an APNS token. Depending on your usecase, you can have some or all of them in a standalone MongoosePush instance or using a docker container.\nFor the full configuration you need to set the following directory structure up:\n* priv/\n    * ssl/\n      * rest_cert.pem - The HTTP endpoint certificate\n      * rest_key.pem - private key for the HTTP endpoint certificate (has to be unencrypted)\n    * apns/\n      * prod_cert.pem - Production APNS app certificate\n      * prod_key.pem - Production APNS app certificate's private key (has to be unencrypted)\n      * dev_cert.pem - Development APNS app certificate\n      * dev_key.pem - Development APNS app certificate's private key (has to be unencrypted)\n      * token.p8 - `APNS` authentication token\n    * fcm/\n      * token.json - `FCM` service account JSON file\n* var/\n    * config.toml - TOML configuration file (optional)\n\nIf you want to use `APNS` token authentication you need to provide token and set `key_id` and `team_id` environment variables. To see how to obtain token and `key_id` read [this](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token_based_connection_to_apns).\nTo see how to obtain `team_id` read [this](https://www.mobiloud.com/help/knowledge-base/ios-app-transfer/).\n\n`FCM` JSON file can be generated by Firebase console (https://console.firebase.google.com). Go to your project -> `Project Settings` -> `Service accounts` -> `Generate new private key`.\n\nTOML config file is optional. It allows to fully configure the service but basic configuration can be achieved via environmental variables only.\n\nAssuming that you have the `priv` directory with all certificates and fcm token in current directory and `var` directory with a config file, then you may start MongoosePush with the following command:\n\n```bash\ndocker run -v `pwd`/priv:/opt/app/priv \\\n  -v `pwd`/var:/opt/app/var \\\n  -e PUSH_HTTPS_CERTFILE=\"/opt/app/priv/ssl/rest_cert.pem\" \\\n  -e PUSH_HTTPS_KEYFILE=\"/opt/app/priv/ssl/rest_key.pem\" \\\n  -it --rm mongooseim/mongoose-push:latest\n```","ref":"readme.html#running-from-dockerhub"},{"type":"extras","title":"Local build prerequisites - Introduction","doc":"* Elixir 1.5+ (http://elixir-lang.org/install.html)\n* Erlang/OTP 19.3+\n  > NOTE: Some Erlang/OTP 20.x releases / builds contain TLS bug that prevents connecting to APNS servers.\n  > When building with this Erlang version, please make sure that MongoosePushRuntimeTest test suite passes.\n  > It is however highly recommended to build MongoosePush with Erlang/OTP 21.x.\n* Rebar3 (just enter ```mix local.rebar```)","ref":"readme.html#local-build-prerequisites"},{"type":"extras","title":"Configuration","doc":"# Configuration\n\nThe whole configuration is contained in the `config/{prod|dev|test}.exs` file, depending on which `MIX_ENV` you will be using. You should use `MIX_ENV=prod` for production installations and `MIX_ENV=dev` for your development.\n\nLet's examine `config/dev.exs`.","ref":"configuration.html"},{"type":"extras","title":"RESTful API configuration - Configuration","doc":"```elixir\nconfig :mongoose_push, MongoosePushWeb.Endpoint,\n  https: [\n    ip: {127, 0, 0, 1},\n    port: 8443,\n    keyfile: \"priv/ssl/fake_key.pem\",\n    certfile: \"priv/ssl/fake_cert.pem\",\n    otp_app: :mongoose_push\n  ]\n```\nThis part of the configuration relates only to the `HTTPS` endpoints exposed by `MongoosePush`. Here you can set an IP address (option: `ip`), a port, and paths to your `HTTPS` `TLS` certificates. You should ignore other options unless you are sure you know what you're doing (to learn more, explore [phoenix documentation](https://hexdocs.pm/phoenix/overview.html)).\n\nYou may entirely skip the `mongoose_push` config entry to disable the `HTTPS` API and just use this project as an `Elixir` library.","ref":"configuration.html#restful-api-configuration"},{"type":"extras","title":"FCM configuration - Configuration","doc":"Let's take a look at a sample `FCM` service configuration:\n```elixir\nconfig :mongoose_push, fcm: [\n    default: [\n        appfile: \"path/to/token.json\",\n        endpoint: \"localhost\",\n        pool_size: 5,\n        mode: :prod,\n        tls_opts: []\n    ]\n  ]\n```\n\nThis is a definition of a pool - each pool has a name and a configuration. It is possible to have multiple named pools with different configuration, which includes pool size, environment mode, etc. Currently the only reason you may want to do this is to create separate production and development pools which may be selected by an `HTTP` client by specifying matching `:mode` in their push request.\n\nEach `FCM` pool may be configured by setting the following fields:\n* **appfile** (*required*) - path to an `FCM` service account JSON file. Details on how to get one are in the [Running from DockerHub](docker.md#running-from-dockerhub) section\n* **pool_size** (*required*) - maximum number of used `HTTP/2` connections to google's service\n* **mode** (*either `:prod` or `:dev`*) - pool's mode. The `HTTP` client may select a pool used to push a notification by specifying a matching option in the request\n* **endpoint** (*optional*) - URL override for the `FCM` service. Useful mainly in tests\n* **port** (*optional*) - Port number override for `the FCM` service. Useful mainly in tests\n* **tags** (*optional*) - a list of tags. Used when choosing a pool to match the request tags when sending a notification. More details: https://github.com/esl/sparrow#tags\n* **tls_opts** (*optional*) - a list of raw options passed to the `ssl:connect` function call while connecting to `FCM`. When this option is omitted, it will default to a set of values that will verify the server certificate based on an internal CA chain. Providing this option overrides all defaults, effectively disabling certificate validation. Therefore passing this option is not recommended outside dev and test environments.\n\nYou may entirely skip the `FCM` config entry to disable `FCM` support.","ref":"configuration.html#fcm-configuration"},{"type":"extras","title":"APNS configuration - Configuration","doc":"Lets take a look at a sample `APNS` service configuration:\n```elixir\nconfig :mongoose_push, apns: [\n   dev: [\n     cert: \"priv/apns/dev_cert.pem\",\n     key: \"priv/apns/dev_key.pem\",\n     mode: :dev,\n     use_2197: false,\n     pool_size: 5,\n     tls_opts: []\n   ],\n   prod: [\n     cert: \"priv/apns/prod_cert.pem\",\n     key: \"priv/apns/prod_key.pem\",\n     mode: :prod,\n     use_2197: false,\n     pool_size: 5,\n     tls_opts: []\n   ]\n ]\n ```\nJust like for `FCM`, at the top level we can specify the named pools that have different configurations. For `APNS` this is especially useful since Apple delivers different APS certificates for development and production use. The HTTP client can select a named pool by providing a matching :mode in the HTTP request.\n\nEach `APNS` pool may be configured by setting the following fields:\n* **cert** (*required*) - relative path to `APNS` `PEM` certificate issued by Apple. This certificate has to be somewhere in the `priv` directory\n* **key** (*required*) - relative path to `PEM` private key for `APNS` certificate issued by Apple. This file has to be somewhere in the `priv` directory\n* **pool_size** (*required*) - maximum number of used `HTTP/2` connections to the google's service\n* **mode** (*either `:prod` or `:dev`*) - pool's mode. The `HTTP` client may select a pool used to push a notification by specifying the matching option in the request\n* **endpoint** (*optional*) - URL override for `APNS` service. Useful mainly in tests\n* **port** (*optional*) - Port number override for `APNS` service. Useful mainly in tests\n* **use_2197** (*optional `true` or `false`*) - whether to use an alternative port for `APNS`: 2197\n* **tags** (*optional*) - a list of tags. Used when choosing a pool to match the request tags when sending a notification. More details: https://github.com/esl/sparrow#tags\n* **tls_opts** (*optional*) - a list of raw options passed to the `ssl:connect` function call while connecting to `APNS`. When this option is omitted, it will default to a set of values that will verify the server certificate based on an internal CA chain. Providing this option overrides all defaults, effectively disabling certificate validation. Therefore passing this option is not recommended outside dev and test environments.\n\nYou may entirely skip the `APNS` config entry to disable `APNS` support.\n\n#### Converting APNS files\n\nIf you happen to have APNS files in a `pkcs12` format (.p12 or .pfx extension) you need to convert them to the `PEM` format which is understood by MongoosePush. Below you can find sample `openssl` commands which may be helpful.\n\n##### Get cert from pkcs12 file\n\n    openssl pkcs12 -in YourAPNS.p12 -out YourCERT.pem -nodes -nokeys\n\n#### Get key from pkcs12 file\n\n    openssl pkcs12 -in YourAPNS.p12 -out YourKEY.pem -nodes -nocerts","ref":"configuration.html#apns-configuration"},{"type":"extras","title":"Environment variables - Configuration","doc":"Environment variables to configure a production release.\n\n#### Settings for HTTP endpoint:\n* `PUSH_HTTPS_BIND_ADDR` - Bind IP address of the HTTP endpoint. Default value in prod release is \"127.0.0.1\", but docker overrides this with \"0.0.0.0\"\n* `PUSH_HTTPS_PORT` - The port of the MongoosePush HTTP endpoint. Please note that docker exposes only `8443` port, so changing this setting is not recommended\n* `PUSH_HTTPS_KEYFILE` - Path to a PEM keyfile used for HTTP endpoint. This path should be either absolute or relative to root of the release (in the Docker container that's `/opt/app`). Default: `priv/ssl/fake_key.pem`.\n* `PUSH_HTTPS_CERTFILE` - Path to a PEM certfile used for HTTP endpoint. This path should be either absolute or relative to root of the release (in the Docker container that's `/opt/app`). Default: `priv/ssl/fake_cert.pem`.\n* `PUSH_HTTPS_ACCEPTORS` - Number of TCP acceptors to start\n\n#### General settings:\n* `PUSH_LOGLEVEL` - `debug`/`info`/`warning`/`error` - Log level of the application. `info` is the default one\n* `PUSH_LOGFORMAT` - `logfmt`/`json` - Log format of the application. Defaults to `logfmt` for the `dev` and `test` environments, and to `json` for the `prod` environment.\n* `PUSH_FCM_ENABLED` - `true`/`false` - Enable or disable `FCM` support. Disabled by default\n* `PUSH_APNS_ENABLED` - `true`/`false` - Enable or disable `APNS` support. Disabled by default\n* `TLS_SERVER_CERT_VALIDATION` - `true`/`false` - Enable or disable TLS\n  options for both FCM and APNS.\n* `PUSH_OPENAPI_EXPOSE_SPEC` - `true`/`false` - Enable or disable OpenAPI specification endpoint support. If enabled, it will be available on `/swagger.json` HTTP path. Disabled by default\n* `PUSH_OPENAPI_EXPOSE_UI` - `true`/`false` - Enable or disable SwaggerUI. If enabled, it will be available on `/swaggerui`. Disabled by default. Requires `PUSH_OPENAPI_EXPOSE_SPEC` to also be enabled.\n\n#### Settings for FCM service:\n* `PUSH_FCM_ENDPOINT` - Hostname of the `FCM` service. Set only for local testing. By default this option points to the Google's official hostname\n* `PUSH_FCM_APP_FILE` - Path to the `FCM` service account JSON file. For details look at [Running from DockerHub](docker.md#running-from-dockerhub) section\n* `PUSH_FCM_POOL_SIZE` - Connection pool size for the `FCM` service\n\n#### Settings for development APNS service:\n* `PUSH_APNS_DEV_ENDPOINT` - Hostname of the `APNS` service. Set only for local testing. By default this option points to the Apple's official hostname\n* `PUSH_APNS_DEV_CERT` - Path to Apple's development certfile used to communicate with `APNS`\n* `PUSH_APNS_DEV_KEY` - Path to Apple's development keyfile used to communicate with `APNS`\n* `PUSH_APNS_DEV_KEY_ID` - Key ID generated from Apple's developer console. For details look at the [Running from DockerHub](docker.md#running-from-dockerhub) section *required for token authentication*\n* `PUSH_APNS_DEV_TEAM_ID` - TEAM ID generated from Apple's developer console. For details look at the [Running from DockerHub](docker.md#running-from-dockerhub) section *required for token authenticaton*\n* `PUSH_APNS_DEV_P8_TOKEN` - Token generated from Apple's developer console. For details look at the [Running from DockerHub](docker.md#running-from-dockerhub) section\n* `PUSH_APNS_DEV_USE_2197` - `true`/`false` - Enable or disable the use of an alternative `2197` port for `APNS` connections in development mode. Disabled by default\n* `PUSH_APNS_DEV_POOL_SIZE` - Connection pool size for `APNS` service in development mode\n* `PUSH_APNS_DEV_DEFAULT_TOPIC` - Default `APNS` topic to be set if the client app doesn't specify it with the API call. If this option is not set, MongoosePush will try to extract this value from the provided APNS certificate (the first topic will be assumed default). DEV certificates normally don't provide any topics, so this option can be safely left unset\n\n#### Settings for production APNS service:\n* `PUSH_APNS_PROD_ENDPOINT` - Hostname of the `APNS` service. Set only for local testing. By default this option points to the Apple's official hostname\n* `PUSH_APNS_PROD_CERT` - Path to Apple's production certfile used to communicate with `APNS`\n* `PUSH_APNS_PROD_KEY` - Path to Apple's production keyfile used to communicate with `APNS`\n* `PUSH_APNS_PROD_KEY_ID` - Key ID generated from Apple's developer console. For details look at the [Running from DockerHub](docker.md#running-from-dockerhub) section *required for token authentication*\n* `PUSH_APNS_PROD_TEAM_ID` - TEAM ID generated from Apple's developer console. For details look at the  [Running from DockerHub](docker.md#running-from-dockerhub) section *required for token authenticaton*\n* `PUSH_APNS_PROD_P8_TOKEN` - Token generated from Apple's developer console. For details look at the [Running from DockerHub](docker.md#running-from-dockerhub) section\n* `PUSH_APNS_PROD_USE_2197` - `true`/`false` - Enable or disable the use of an alternative `2197` port for `APNS` connections in production mode. Disabled by default\n* `PUSH_APNS_PROD_POOL_SIZE` - Connection pool size for `APNS` service in production mode\n* `PUSH_APNS_PROD_DEFAULT_TOPIC` - Default `APNS` topic to be set if the client app doesn't specify it with the API call. If this option is not set, MongoosePush will try to extract this value from the provided APNS certificate (the first topic will be assumed default)","ref":"configuration.html#environment-variables"},{"type":"extras","title":"TOML schema - Configuration","doc":"> IMPORTANT:\n  > When a configuration option is defined in TOML file it can't be overwritten by environmental variables.\n  > You can use both methods for different options though. \n\n#### General keys\n\n* `general.logging.level` (*string*, *optional*) - One of: `debug`/`info`/`warning`/`error`. If not set, falls back to the environment variable `PUSH_LOGLEVEL` or its default.\n* `general.logging.format` (*string*, *optional*) - One of: `logfmt`/`json` - Log format of the application. If not set, falls back to the environment variable `PUSH_LOGFORMAT` or its default.\n* `general.https.bind.addr` (*string*, *optional*) - Bind IP address of the HTTPS endpoint. If not set, falls back to the environment variable `PUSH_HTTPS_BIND_ADDR` or its default.\n* `general.https.bind.port` (*integer*, *optional*) - Port of the HTTPS endpoint. If not set, falls back to the environment variable `PUSH_HTTPS_PORT` or its default.\n* `general.https.num_acceptors` (*integer*, *optional*) - Number of TCP acceptors to start. If not set, falls back to the environment variable `PUSH_HTTPS_ACCEPTORS` or its default.\n* `general.https.certfile` (*string*, *optional*) - Path to a PEM certfile used for HTTPS endpoint. If not set, falls back to the environment variable `PUSH_HTTPS_CERTFILE` or its default. See `PUSH_HTTPS_CERTFILE` documentation for more details.\n* `general.https.keyfile` (*string*, *optional*) - Path to a PEM keyfile used for HTTPS endpoint. If not set, falls back to the environment variable `PUSH_HTTPS_KEYFILE` or its default. See `PUSH_HTTPS_KEYFILE` documentation for more details.\n* `general.https.cacertfile` (*string*, *optional*) - Path to a PEM cacertfile used for HTTPS endpoint. If not set, falls back to the environment variable `PUSH_HTTPS_CERTFILE` or its default. See `PUSH_HTTPS_CERTFILE` documentation for more details.\n* `general.openapi.expose_spec` (*boolean*, *optional*) - Enable or disable OpenAPI specification endpoint. If enabled, it will be available on `/swagger.json` HTTP path. If not set, falls back to the environment variable `PUSH_OPENAPI_EXPOSE_SPEC` or its default.\n* `general.openapi.expose_ui` (*boolean*, *optional*) - Enable or disable SwaggerUI. If enabled, it will be available on `/swaggerui` HTTP path.  If not set, falls back to the environment variable `PUSH_OPENAPI_EXPOSE_UI` or its default.\n\n#### FCM keys\n\n`[[service.fcm]]` (*array*, *optional*) - TOML Array representing a single FCM connection pool. Can have its own connection details like auth, and can be defined with a unique set of `tags` that can be later used when sending notifications to find a proper connection pool. If no `service.fcm` array entry is provided, FCM will be disabled. All following TOML keys are valid for any `service.fcm` array entry:\n\n* `service.fcm.tags` (*list(string)*, *optional*) - List of tags to identify this connection pool. When sending push notifications, you can provide a similar list of tags to \"select\" a correct connection pool. Notifications will be send only via a connection pool that defines all tags provided along with a notification request.\n* `service.fcm.connection.endpoint` (*string*, *optional*) - Domain/Host of the FCM server. You should leave this not set to use official FCM servers.\n* `service.fcm.connection.port` (*integer*, *optional*) - Port of the FCM server. You should leave this not set to use official FCM servers.\n* `service.fcm.connection.count` (*integer*, *optional*) - Number of connections to open. Default is 5.\n* `service.fcm.auth.appfile` (*string*, *optional*) - Path to the FCM \"app file\" from the FCM admin console. This path should be either absolute, or relative to root dir of the release (in Docker container that would be `/opt/app`). Default: `priv/fcm/token.json`.\n\n#### APNS keys\n\n`[[service.apns]]` (*array*, *optional*) - TOML Array representing a single APNS connection pool. Can have its own connection details like auth, and can be defined with a unique set of `tags` that can be later used when sending notifications to find a proper connection pool. If no `service.apns` array entry is provided, APNS will be disabled. All following TOML keys are valid for any `service.apns` array entry:\n\n* `service.apns.tags` (*list(string)*, *optional*) - List of tags to identify this connection pool. When sending push notifications, you can provide a similar list of tags to \"select\" a correct connection pool. Notifications will be send only via a connection pool that defines all tags provided along with the notification request.\n* `service.apns.connection.endpoint` (*string*, *optional*) - Domain/Host of APNS server. You should leave this not set to use the official APNS servers.\n* `service.apns.connection.use_2197` (*boolean*, *optional*) - Port of APNS server (2197 or default). You should leave this not set to use the official APNS servers.\n* `service.apns.connection.count` (*integer*, *optional*) - Number of connections to open. Default is 5.\n\nIf token authentication is to be used:\n\n* `service.apns.auth.token.key_id` (*string*, *required*) - \"Key ID\" for this APNS token. See APNS documentation for more details.\n* `service.apns.auth.token.team_id` (*string*, *required*) - \"Team ID\" for this APNS token. See APNS documentation for more details.\n* `service.apns.auth.token.tokenfile` (*string*, *required*) - Path to this APNS token P8 file. This path should be either absolute, or relative to the root dir of the release (in the Docker container that would be `/opt/app`).\n\nIf the certificate authentication is to be used:\n\n* `service.apns.auth.certificate.keyfile` (*string*, *required*) - Path to the PEM encoded keyfile. This path should be either absolute, or relative to root dir of the release (in the Docker container that would be `/opt/app`).\n* `service.apns.auth.certificate.certfile` (*string*, *required*) - Path to the PEM encoded certfile. This path should be either absolute, or relative to root dir of the release (in the Docker container that would be `/opt/app`).\n\nPlease note that only one method of authentication can be used for any given pool. This means that setting `service.apns.auth.certificate` excludes `service.apns.auth.token` and vice versa. Providing both will result in a configuration error.\n\n\n#### Example configuration\n\n```toml\n[general]\n  [general.logging]\n    level = \"info\"\n  [general.https]\n    bind = { addr = \"0.0.0.0\", port = 8443 }\n    num_acceptors = 100\n    certfile = \"priv/ssl/fake_cert.pem\"\n    keyfile = \"priv/ssl/fake_key.pem\"\n    cacertfile = \"priv/ssl/fake_cert.pem\"\n  [general.openapi]\n    expose_spec = true\n    expose_ui = false\n\n[[service.fcm]]\n  tags = [\"tag1\", \"tag2\"]\n  [service.fcm.connection]\n    endpoint = \"localhost\"\n    port = 443\n    count = 10\n  [service.fcm.auth]\n    appfile = \"priv/fcm/token.json\"\n\n[[service.fcm]]\n  tags = [\"another1\", \"another2\"]\n  [service.fcm.connection]\n    endpoint = \"localhost\"\n    port = 443\n    count = 10\n  [service.fcm.auth]\n    appfile = \"priv/fcm/token.json\"\n\n[[service.apns]]\n  mode = \"dev\"\n  default_topic = \"some.topic\"\n  tags = [\"tag1\", \"tag2\"]\n  [service.apns.connection]\n    endpoint = \"localhost\"\n    use_2197 = true\n    count = 10\n  [service.apns.auth.token]\n    key_id = \"some id\"\n    team_id = \"my team\"\n    tokenfile = \"priv/apns/token.p8\"\n\n\n[[service.apns]]\n  mode = \"prod\"\n  default_topic = \"some.topic\"\n  tags = [\"tag1\", \"tag2\"]\n  [service.apns.connection]\n    endpoint = \"localhost\"\n    use_2197 = false\n    count = 10\n  [service.apns.auth.certificate]\n    keyfile = \"priv/apns/dev_key.pem\"\n    certfile = \"priv/apns/dev_cert.pem\"\n```","ref":"configuration.html#toml-schema"},{"type":"extras","title":"Local build","doc":"# Local build","ref":"local_build.html"},{"type":"extras","title":"Prerequisites - Local build","doc":"* Elixir 1.5+ (http://elixir-lang.org/install.html)\n* Erlang/OTP 19.3+\n  > NOTE: Some Erlang/OTP 20.x releases / builds contain a TLS bug that prevents connecting to APNS servers.\n  > When building with this Erlang version, please make sure that the MongoosePushRuntimeTest test suite passes.\n  > It is however highly recommended to build MongoosePush with Erlang/OTP 21.x.\n* Rebar3 (just enter ```mix local.rebar```)","ref":"local_build.html#prerequisites"},{"type":"extras","title":"Production release - Local build","doc":"The build step is really easy. Just type in the root of the repository:\n```bash\nMIX_ENV=prod mix do deps.get, compile, certs.dev, release\n```\n\nAfter this step you may try to run the service via:\n```bash\n_build/prod/rel/mongoose_push/bin/mongoose_push foreground\n```\n\nYeah, I know... It crashed. Running this service is fast and simple but unfortunately you can't have push notifications without a properly configured `FCM` and/or `APNS` service. You can find out how to properly configure it in the [configuration](configuration.md#content) section.","ref":"local_build.html#production-release"},{"type":"extras","title":"Development release - Local build","doc":"Again, an easy step:\n```bash\nMIX_ENV=dev mix do deps.get, compile, certs.dev, release\n```\n\nThe development release is by default configured to connect to a local APNS / FCM mock.\nThis configuration may be changed as needed in the `config/dev.exs` file.\nFor now, let's just start those mocks so that we can use the default dev configuration:\n```bash\ndocker-compose -f test/docker/docker-compose.mocks.yml up -d\n```\n\nAfter this step you may try to run the service via:\n```bash\n_build/dev/rel/mongoose_push/bin/mongoose_push console\n```","ref":"local_build.html#development-release"},{"type":"extras","title":"Running tests","doc":"# Running tests\n\nOne thing that you need to do *once* before running any tests is generating fake certificates for APNS/HTTPS (it doesn't matter which MIX_ENV you run this in):\n\n```bash\nmix certs.dev\n```\n\nAlso, you'll need to have `docker-compose` installed and present in your path to run any tests.","ref":"test.html"},{"type":"extras","title":"TL;DR - Running tests","doc":"```bash\n# Unit tests\nMIX_ENV=test mix do test.env.up, test, test.env.down\n\n# Integration tests\nMIX_ENV=integration mix do test.env.up, test, test.env.down\n```","ref":"test.html#tl-dr"},{"type":"extras","title":"Basic tests (non-release) - Running tests","doc":"Basic tests require FCM and APNS mock services to be present at the time of running the tests:\n\n```bash\n# We start the mocks\nmix test.env.up\n\n# Now we can just run tests\nmix test\n\n# Optionally we can shut the mocks down. If you want to rerun the tests, you may skip this step so that\n# you don't need to re-invoke `mix test.env.up`. Mocks are being reset by each test separately,\n# so you don't need to worry about their state.\nmix test.env.down\n```","ref":"test.html#basic-tests-non-release"},{"type":"extras","title":"Integration tests (using production-grade release) - Running tests","doc":"Integration tests can be run in exactly the same way as described above for \"basic\" tests, with one exception:\nAll Mix commands need to be invoked in the `MIX_ENV=integration` environment:\n\n```bash\n# We start the mocks AND MongoosePush docker container.\n# This may take a few minutes on the first run, as the MongoosePush docker image needs\n# to be built from scratch. Subsequent runs should be much faster.\n# You need to rerun this command each time you make changes in the app code,\n# as MongoosePush needs to be rebuilt and redeployed!\nMIX_ENV=integration mix test.env.up\n\n# Now we can just run tests\nMIX_ENV=integration mix test\n\n# Optionally we can shut the mocks down. If you want to rerun tests, you may skip this step. To do that\n# you don't need to re-invoke `mix test.env.up`. Mocks are being reset by each test separately,\n# so you don't need to worry about their state.\nMIX_ENV=integration mix test.env.down\n```","ref":"test.html#integration-tests-using-production-grade-release"},{"type":"extras","title":"Test environment setup - Running tests","doc":"* `mix test.env.up` - runs `docker-compose up -d --build` with the following compose files:\n  * for `MIX_ENV=test` and `MIX_ENV=dev`: *test/docker/docker-compose.mocks.yml*\n  * for `MIX_ENV=integration`: *test/docker/docker-compose.mocks.yml* and *test/docker/docker-compose.mpush.yml*\n* `mix test.env.down` - runs `docker-compose down` on the same compose files as `mix test.env.up`\n* `mix test.env.wait X` - waits up to X milliseconds for the services from `mix test.env.up` to become available. Prints an error if they don't.","ref":"test.html#test-environment-setup"},{"type":"extras","title":"Docker","doc":"# Docker","ref":"docker.html"},{"type":"extras","title":"Running from DockerHub - Docker","doc":"We provide prebuilt MongoosePush images. Configuration requires either an FCM token, APNS certificates or an APNS token. Depending on your usecase, you can have some or all of them in a standalone MongoosePush instance or using a docker container.\nFor the full configuration you need to set up the following directory structure:\n* priv/\n    * ssl/\n      * rest_cert.pem - The HTTP endpoint certificate\n      * rest_key.pem - private key for the HTTP endpoint certificate (has to be unencrypted)\n    * apns/\n      * prod_cert.pem - Production APNS app certificate\n      * prod_key.pem - Production APNS app certificate's private key (has to be unencrypted)\n      * dev_cert.pem - Development APNS app certificate\n      * dev_key.pem - Development APNS app certificate's private key (has to be unencrypted)\n      * token.p8 - `APNS` authentication token\n    * fcm/\n      * token.json - `FCM` service account JSON file\n* var/\n    * config.toml - TOML configuration file (optional)\n\nIf you want to use the `APNS` token authentication you need to provide the token and set both `key_id` and `team_id` environment variables. To see how to obtain the token and `key_id` read [this](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token_based_connection_to_apns).\nTo see how to obtain `team_id` read [this](https://www.mobiloud.com/help/knowledge-base/ios-app-transfer/).\n\n`FCM` JSON file can be generated by the Firebase console (https://console.firebase.google.com). Go to your project -> `Project Settings` -> `Service accounts` -> `Generate new private key`.\n\nTOML config file is optional. It allows to fully configure the service but basic configuration can be achieved via environmental variables only.\n\nAssuming that you have the `priv` directory with all certificates and fcm token in current directory and `var` directory with a config file, then you may start MongoosePush with the following command:\n\n```bash\ndocker run -v `pwd`/priv:/opt/app/priv \\\n  -v `pwd`/var:/opt/app/var \\\n  -e PUSH_HTTPS_CERTFILE=\"/opt/app/priv/ssl/rest_cert.pem\" \\\n  -e PUSH_HTTPS_KEYFILE=\"/opt/app/priv/ssl/rest_key.pem\" \\\n  -it --rm mongooseim/mongoose-push:latest\n```","ref":"docker.html#running-from-dockerhub"},{"type":"extras","title":"Building - Docker","doc":"Building a docker image is really easy, just type:\n\n```bash\ndocker build . -t mpush:latest\n```\n\nAs a result of this command you get access to the `mpush:latest` docker image. You may run it by typing:\n\n```bash\ndocker run -it --rm mpush:latest foreground\n```\n\nThe docker image that you have just built, exposes the port `8443` for the HTTP API of MongoosePush.\nIt contains a `VOLUME` for path */opt/app/priv* - it is handy for injecting `APNS` and `HTTP API` certificates since by default the docker image comes with test, self-signed certificates.","ref":"docker.html#building"},{"type":"extras","title":"Configuration (basic) - Docker","doc":"The docker image of MongoosePush contains common, basic configuration that is generated from `config/prod.exs`. All useful options may be overridden via [environment variables](configuration.md#environment-variables). You can use TOML config for more control. However, if this is not enough, then you need to prepare your own `config/prod.exs` before image build.","ref":"docker.html#configuration-basic"},{"type":"extras","title":"HTTP API","doc":"# HTTP API\n\nIf for some reason you need `Swagger` specs for this `RESTful` service, there is a swagger endpoint available via an `HTTP` path `/swagger.json`","ref":"http_api.html"},{"type":"extras","title":"Request - HTTP API","doc":"There is only one endpoint at the moment:\n* `POST /{version}/notification/{device_id}`\n\nAs you can imagine, `{device_id}` should be replaced with a device ID/Token generated by your push notification provider (`FCM` or `APNS`). The notification should be sent as a `JSON` payload of this request. A minimal `JSON` request could be like this:\n\n```json\n{\n  \"service\": \"apns\",\n  \"alert\":\n    {\n      \"body\": \"notification's text body\",\n      \"title\": \"notification's title\"\n    }\n}\n```\n\nThe full list of options contains the following:\n* **service** (*required*, `apns` or `fcm`) - push notifications provider to be used for this notification\n* **mode** (*optional*, `prod` (default) or `dev`) - allows for selecting named pool configured in `MongoosePush`\n* **priority** (*optional*) - Either `normal` or `high`. Those values are used without changes for FCM. For APNS however, `normal` maps to priority `5`, while `high` maps to priority `10`. Please refer to FCM / APNS documentation for more details on those values. By default `priority` is not set at all, therefore the push notification service decides which value is used by default.\n* **time_to_live** (*optional*) - Maximum lifespan of an FCM notification. For more details, please, refer to [the official FCM documentation](https://firebase.google.com/docs/cloud-messaging/concept-options#ttl).\n* **mutable_content** (*optional*, `true` / `false` (default)) - Only applicable to APNS. Sets \"mutable-content=1\" in the APNS payload.\n* **topic** (*optional*, `APNS` specific) - if the APNS certificate configured in `MongoosePush` allows for multiple applications, this field selects the application. Please refer to the `APNS` documentation for more details.\n* **tags** (*optional*) - a list of tags used to choose a pool with matching tags. To see how tags work read: https://github.com/esl/sparrow#tags\n* **data** (*optional*) - custom JSON structure sent to the target device. For `APNS`, all keys from this structure are merged into the highest level APS message (the one that holds the 'aps' key), while for `FCM` the whole `data` json structure is sent as FCM's `data payload` along with `notification`.\n* **alert** (*optional*) - JSON structure that if provided will send a non-silent notification with the following fields:\n  * **body** (*required*) - text body of the notification\n  * **title** (*required*) - short title of the notification\n  * **click_action** (*optional*) - for `FCM` its `activity` to run when notification is clicked. For `APNS` its `category` to invoke. Please refer to the Android/iOS documentation for more details about this action\n  * **tag** (*optional*, `FCM` specific) - notifications aggregation key\n  * **badge** (*optional*, `APNS` specific) - unread notifications count\n  * **sound** (*optional*) - sound that should be play when the notification arrives. Please refer to the FCM / APNS documentation for more details.\n\nPlease note that either **alert** and **data** has to be provided (also can be both).\nIf you only specify **alert**, the request will result in a classic, simple notification.\nIf you only specify **data**, the request will result in a \"silent\" notification, i.e. the client will receive the data and will be able to decide whether and how the notification should be shown to the user.\nIf you specify both **alert** and **data**, the target device will receive both notification and the custom data payload to process.","ref":"http_api.html#request"},{"type":"extras","title":"Response - HTTP API","doc":"Description of the possible server responses\n\n* **200** `\"OK\"` - the request was successful.\n* **400** `{\"reason\" : \"invalid_request\"|\"no_matching_pool\"}` - the request was invalid.\n* **410** `{\"reason\" : \"unregistered\"}` - the device was not registered.\n* **413** `{\"reason\" : \"payload_too_large\"}` - the payload was too large.\n* **429** `{\"reason\" : \"too_many_requests\"}` - there were too many requests to the server.\n* **503** `{\"reason\" : \"service_internal\"|\"internal_config\"|\"unspecified\"}` - the internal service or configuration error occurred.\n* **520** `{\"reason\" : \"unspecified\"}` - the unknown error occurred.\n* **500** `{\"reason\" : reason}` - the server internal error occurred,\n  specified by **reason**.","ref":"http_api.html#response"},{"type":"extras","title":"Healthcheck","doc":"# Healthcheck\n\nMongoosePush exposes a `/healthcheck` endpoint, from which you can get information about the current status of all connections in a `JSON` format, grouped by connection pool. The response structure is described in the following [RFC draft](https://datatracker.ietf.org/doc/draft-inadarei-api-health-check). An example with 2 pools, one being connected to the service and the other one not, would look like this:\n\n```json\n{\n  \"description\": \"Health of MongoosePush connections to FCM and APNS services\",\n  \"details\": {\n    \"pool:pool1\": [\n      {\n        \"output\": {\n          \"connected\": 5,\n          \"disconnected\": 0\n        },\n        \"status\": \"pass\",\n        \"time\": \"2020-07-01T11:58:30.093318Z\"\n      }\n    ],\n    \"pool:pool2\": [\n      {\n        \"output\": {\n          \"connected\": 0,\n          \"disconnected\": 5\n        },\n        \"status\": \"fail\",\n        \"time\": \"2020-07-01T11:58:30.102291Z\"\n      }\n    ]\n  },\n  \"releaseID\": \"2.0.2\",\n  \"status\": \"pass\",\n  \"version\": \"2\"\n}\n```\nIf all the connections are down the response status is `503`; in all the other cases, it's `200`.\n\nPlease note that it's not recommended to use this frequently as it puts an extra load on the worker processes.","ref":"healthcheck.html"},{"type":"extras","title":"Metrics","doc":"# Metrics\n\nMongoosePush 2.1 provides metrics in the Prometheus format on the `/metrics` endpoint.\nThis is a breaking change compared to previous releases.\nExisting dashboards will need to be updated.\n\nIt is important to know that metrics are created inside MongoosePush only when a certain event happens.\nThis may mean that a freshly started MongoosePush node will not have all the possible metrics available yet.","ref":"metrics.html"},{"type":"extras","title":"Default dashboard - Metrics","doc":"MongoosePush 2.1.1 provides default Grafana dashboards where we can see some of the available metrics.\nYou can create the dashboards using the following command:\n\n```bash\nmake dashboards\n```\n\nThis starts and configures two containers:\n* `mpush-grafana` - running Grafana, available at http://127.0.0.1:3000/\n* `mpush-prometheus` - running Prometheus, which scraps the metrics from the `/metrics` endpoint, available at http://127.0.0.1:9090/\n\nOnce we login to the Grafana container with the default (login: admin, password: admin) credentials we can see two dashboards:\n* MongoosePush Metrics - displaying metrics related to notification send times and successful/failed connections.\n* MongoosePush VM - this dashboard contains metrics related to the VM like memory allocations or lengths of the run queues.\n\nYou can stop the docker containers that are running Grafana and Prometheus using the following command:\n\n```bash\nmake clean-dashboards\n```","ref":"metrics.html#default-dashboard"},{"type":"extras","title":"Available metrics - Metrics","doc":"#### Histograms\n\nFor more details about the histogram metric type please go to https://prometheus.io/docs/concepts/metric_types/#histogram\n\n###### Notification sent time\n\n`mongoose_push_notification_send_time_microsecond_bucket{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS},le=${LE}}`\n`mongoose_push_notification_send_time_microsecond_sum{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS}}`\n`mongoose_push_notification_send_time_microsecond_count{error_category=${CATEGORY},error_reason=${REASON},service=${SERVICE},status=${STATUS}}`\n\nWhere:\n* `STATUS` is `\"success\"` for the successful notifications or `\"error\"` in all other cases\n* `SERVICE` is either `\"apns\"` or `\"fcm\"`\n* `CATEGORY` is an arbitrary error category term (in case of `status=\"error\"`) or an empty string (when `status=\"success\"`)\n* `REASON` is an arbitrary error reason term (in case of `status=\"error\"`) or an empty string (when `status=\"success\"`)\n* `LE` defines the `upper inclusive bound` (`less than or equal`) values for buckets, currently `1000`, `10_000`, `25_000`, `50_000`, `100_000`, `250_000`, `500_000`, `1000_000` or `+Inf`\n\nThis histogram metric shows the distribution of times needed to:\n1. Select a worker (this may include waiting time when all workers are busy).\n2. Send a request.\n3. Get a response from push notifications provider.\n\n###### HTTP/2 requests\n\n`sparrow_h_worker_handle_duration_microsecond_bucket{le=${LE}}`\n`sparrow_h_worker_handle_duration_microsecond_sum{le=${LE}}`\n`sparrow_h_worker_handle_duration_microsecond_count{le=${LE}}`\n\nWhere:\n* `LE` defines the `upper inclusive bound` (`less than or equal`) values for buckets, currently `1000`, `10_000`, `25_000`, `50_000`, `100_000`, `250_000`, `500_000`, `1000_000` or `+Inf`\n\nThis histogram metric shows the distribution of times needed to handle and send a request. This includes:\n1. Open a new stream within an already established channel.\n2. Send a request.\n\n> **NOTE**\n>\n> A bucket of value 250_000 will keep the count of measurements that are less than or equal to 250_000.\n> A measurement of value 51_836 will be added to all the buckets where the upper bound is greater than 51_836.\n> In this case these are buckets `100_000`, `250_000`, `500_000`, `1000_000` and `+Inf`\n\n#### Counters\n\n* `mongoose_push_supervisor_init_count{service=${SERVICE}}` - Counts the number of push notification service supervisor starts.\n  The `SERVICE` variable can take `\"apns\"` or `\"fcm\"` as a value.\n  This metric is updated when MongoosePush starts, and later on when the underlying supervision tree is terminated and the error is propagated to the main application supervisor.\n* `mongoose_push_apns_state_init_count` - Counts the number of APNS state initialisations.\n* `mongoose_push_apns_state_terminate_count` - Counts the number of APNS state terminations.\n* `mongoose_push_apns_state_get_default_topic_count` - Counts the number of default topic reads from cache.\n* `sparrow_h_worker_init_count` - Counts the number of h2_worker starts.\n* `sparrow_h_worker_terminate_count` - Counts the number of h2_worker terminations.\n* `sparrow_h_worker_conn_success_count` - Counts the number of successful h2_worker connections.\n* `sparrow_h_worker_conn_fail_count` - Counts the number of failed h2_worker connections.\n* `sparrow_h_worker_conn_lost_count` - Counts the number of lost h2_worker connections.\n* `sparrow_h_worker_request_success_count` - Counts the number of successful h2_worker requests.\n* `sparrow_h_worker_request_error_count` - Counts the number of failed h2_worker requests.\n\n#### Gauge\n\n* `sparrow_pools_warden_pools_gauge` - Current number of worker pools.\n* `sparrow_pools_warden_workers_gauge{pool=${POOL}}` - Current number of workers operated by a given worker `POOL`.\n* `vm_memory_total` - Total amount of currently allocated memory.\n* `vm_memory_processes` - Amount of memory currently allocated for processes.\n* `vm_memory_processes_used` - Amount of memory currently used for processes.\n* `vm_memory_binary` - Amount of memory currently allocated for binaries.\n* `vm_memory_ets` - Amount of memory currently allocated for ETS tables.\n* `vm_total_run_queue_lengths_total` - A sum of all current run queue lengths.\n* `vm_total_run_queue_lengths_cpu` - A sum of current CPU schedulers' run queue lengths.\n* `vm_system_counts_process_count` - Number of process currently existing at the local node.","ref":"metrics.html#available-metrics"},{"type":"extras","title":"How to quickly see all metrics - Metrics","doc":"```bash\ncurl -k https://127.0.0.1:8443/metrics\n```\n\nThe above command assumes that MongoosePush runs on `localhost` and listens on port `8443`.\nPlease, mind the `HTTPS` protocol, metrics are hosted on the same port than all the other API endpoints.","ref":"metrics.html#how-to-quickly-see-all-metrics"},{"type":"extras","title":"Prometheus configuration - Metrics","doc":"When configuring Prometheus, it's important to:\n* set the `scheme` to `https`,\n* set the `insecure_skip_verify` to `true` if the default self-signed certificates are used.\n\n```yaml\nscrape_configs:\n  - job_name: 'mongoose-push'\n    scheme: 'https' #MongoosePush exposes encrypted endpoint - HTTPS\n    tls_config: #The default certs used by MongoosePush are self-signed\n      insecure_skip_verify: true #For checking purposes we can ignore certs verification\n    static_configs:\n      - targets: ['mongoose-push:8443']\n        labels:\n          group: 'production'\n\n```","ref":"metrics.html#prometheus-configuration"},{"type":"extras","title":"2.0.x to 2.1.0","doc":"# Migration guide from 2.0.x to 2.1.0\n\nPlease note that for standard usage, when configuring MongoosePush only with environmental variables, the `config/*.exs` files are upgraded automatically and there is no action required from your end.\nIf your MongoosePush is using modified `config/*.exs` files, please have a closer look at the changes presented below to see if you have to adjust your custom configuration.\nIn such case, there could be a few changes necessary in the configuration files and a few additional, optional ones.","ref":"2-0-x_2-1-0.html"},{"type":"extras","title":"Main config (config/config.exs) - 2.0.x to 2.1.0","doc":"MongoosePush supports structured logging from the 2.1.0 release. To use that feature, there is a need to change the logger configuration to use the new default.\nOld logger config:\n\n```elixir\nconfig :logger, :console,\n  format: \"\\n$dateT$time [$level] $metadata$levelpad$message\\n\",\n  metadata: [:pid]\n```\n\nNew logger config:\n```elixir\nconfig :logger, :console,\n  format: {MongoosePush.Logger.LogFmt, :format},\n  metadata: :all\n```\nFurther notes on logging are in the [logging section](2.0.x_2.1.0.md#logging)\n\nAdditionally there are a few new defaults needed to be set up:\n```elixir\nconfig :mongoose_push, MongoosePush.Service,\n  fcm: MongoosePush.Service.FCM,\n  apns: MongoosePush.Service.APNS\n\nconfig :mongoose_push, backend_module: MongoosePush\n\nconfig :phoenix, :json_library, Jason\n```\n\nLastly, since 2.1.0 MongoosePush uses `Phoenix` instead of `Maru` and Maru config entry can be removed.\n```elixir\nconfig :maru, :test, false\n```","ref":"2-0-x_2-1-0.html#main-config-config-config-exs"},{"type":"extras","title":"Environmental configs (config/{prod|dev|test}.exs) - 2.0.x to 2.1.0","doc":"### `Phoenix` in place of `Maru`\nAs mentioned earlier, MongoosePush uses `Phoenix` and the config has to be updated to reflect that change.\nOld `Maru` config entry:\n```elixir\nconfig :maru, MongoosePush.Router,\n  versioning: [\n    using: :path\n  ],\n  https: [\n    bind_addr: {:system, :string, \"PUSH_HTTPS_BIND_ADDR\", \"127.0.0.1\"},\n    port: {:system, :integer, \"PUSH_HTTPS_PORT\", 8443},\n    keyfile: {:system, :string, \"PUSH_HTTPS_KEYFILE\", \"priv/ssl/fake_key.pem\"},\n    certfile: {:system, :string, \"PUSH_HTTPS_CERTFILE\", \"priv/ssl/fake_cert.pem\"},\n    cacertfile: {:system, :string, \"PUSH_HTTPS_CERTFILE\", \"priv/ssl/fake_cert.pem\"},\n    acceptors: {:system, :integer, \"PUSH_HTTPS_ACCEPTORS\", 100},\n    otp_app: :mongoose_push\n  ]\n```\nIt should be removed completely and in its place there must be the new, `Phoenix` config entry:\n```elixir\nconfig :mongoose_push, MongoosePushWeb.Endpoint,\n  https: [\n    ip: {\n      :system,\n      # Custom type parser (Phoenix needs erlang-inet-style IP address)\n      {MongoosePush.Config.Utils, :parse_bind_addr, []},\n      \"PUSH_HTTPS_BIND_ADDR\",\n      {127, 0, 0, 1}\n    },\n    port: {:system, :integer, \"PUSH_HTTPS_PORT\", 8443},\n    keyfile: {:system, :string, \"PUSH_HTTPS_KEYFILE\", \"priv/ssl/fake_key.pem\"},\n    certfile: {:system, :string, \"PUSH_HTTPS_CERTFILE\", \"priv/ssl/fake_cert.pem\"},\n    cacertfile: {:system, :string, \"PUSH_HTTPS_CERTFILE\", \"priv/ssl/fake_cert.pem\"},\n    protocol_options: [\n      # https://ninenines.eu/docs/en/cowboy/2.5/manual/cowboy_http/\n    ],\n    transport_options: [\n      # https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_tcp/\n      # https://ninenines.eu/docs/en/ranch/1.6/manual/ranch_ssl/\n      num_acceptors: {:system, :integer, \"PUSH_HTTPS_ACCEPTORS\", 100}\n    ],\n    otp_app: :mongoose_push\n  ],\n  debug_errors: false,\n  code_reloader: false,\n  check_origin: true,\n  server: true\n  ```\n  As you can see, there is no change in the variables used to parse the options.","ref":"2-0-x_2-1-0.html#environmental-configs-config-prod-dev-test-exs"},{"type":"extras","title":"Logging - 2.0.x to 2.1.0","doc":"Old logging entry looked like this:\n```elixir\nconfig :mongoose_push, loglevel: {:system, :atom, \"PUSH_LOGLEVEL\", :info}\n```\n\nNew logging entry may look like the following:\n```elixir\nconfig :mongoose_push, :logging,\n  level: {:system, :atom, \"PUSH_LOGLEVEL\", :info},\n  format: {:system, :atom, \"PUSH_LOGFORMAT\", :json}\n```\n\nThe structure changed a little and there is a new variable, `PUSH_LOGFORMAT`.\nIt defaults to `:json` for the `prod` environment, and to `:logfmt` for the `dev` and `test` environments.\nThe `logfmt` backend was changed to support structured logging.\nPlease note that if you had a MongoosePush node configured with a log aggregation backend it probably needs to be reconfigured to match the current format of the log messages.\nYou might also want to consider using the second standard, `JSON`, that MongoosePush now supports.","ref":"2-0-x_2-1-0.html#logging"},{"type":"extras","title":"OpenAPI - 2.0.x to 2.1.0","doc":"MongoosePush can expose OpenAPI specification if enabled. Config entry may look like this:\n```elixir\nconfig :mongoose_push,\n  openapi: [\n    expose_spec: {:system, :boolean, \"PUSH_OPENAPI_EXPOSE_SPEC\", false},\n    expose_ui: {:system, :boolean, \"PUSH_OPENAPI_EXPOSE_UI\", false}\n  ]\n  ```\n`PUSH_OPENAPI_EXPOSE_SPEC` enables OpenAPI endpoint support and `PUSH_OPENAPI_EXPOSE_UI` enables SwaggerUI.\nBoth these options are disabled by default. For more details refer to the [configuration guide](../configuration.md#general-settings).","ref":"2-0-x_2-1-0.html#openapi"},{"type":"extras","title":"Elixometer - 2.0.x to 2.1.0","doc":"MongoosePush does not use `Elixometer` for its metrics anymore. Metrics are provided using `Telemetry` and `elixometer` config entry should be removed.\nOld `elixometer` entry:\n```elixir\nconfig :elixometer,\n  reporter: :exometer_report_tty,\n  env: Mix.env(),\n  metric_prefix: \"mongoose_push\"\n  ```\n\nThere is no config entry necessary for `Telemetry` metrics.\nTo learn more about the new metrics and see how to setup default Grafana dashboards check out the [metrics guide](../metrics.md).","ref":"2-0-x_2-1-0.html#elixometer"},{"type":"extras","title":"API - 2.0.x to 2.1.0","doc":"Please note that API v2 is deprecated and will be removed in the future.\nAPI v2 and v3 differ only by the returned status and content in case of errors, so in case you are using API v2 please consider changing to API v3.","ref":"2-0-x_2-1-0.html#api"},{"type":"extras","title":"2.1.1 to 2.1.2","doc":"# Migration guide from 2.1.1 to 2.1.2","ref":"2-1-1_2-1-2.html"},{"type":"extras","title":"Configuration via environmental variables - 2.1.1 to 2.1.2","doc":"Configuration options `PUSH_APNS_ENABLED` and `PUSH_FCM_ENABLED` have changed their default value from `true` to `false`.\nIn case of a deployment (e.g. with Docker) where those variables were not set,\nto keep the same behaviour they need to be explicitly set to `true`.","ref":"2-1-1_2-1-2.html#configuration-via-environmental-variables"},{"type":"extras","title":"Example - 2.1.1 to 2.1.2","doc":"Old way of running MongoosePush with Docker:\n\n```bash\ndocker run -v `pwd`/priv:/opt/app/priv \\\n  -v `pwd`/var:/opt/app/var \\\n  -e PUSH_HTTPS_CERTFILE=\"/opt/app/priv/ssl/rest_cert.pem\" \\\n  -e PUSH_HTTPS_KEYFILE=\"/opt/app/priv/ssl/rest_key.pem\" \\\n  -it --rm mongooseim/mongoose-push:2.1.1\n```\n\nNow it has to be:\n\n```bash\ndocker run -v `pwd`/priv:/opt/app/priv \\\n  -v `pwd`/var:/opt/app/var \\\n  -e PUSH_HTTPS_CERTFILE=\"/opt/app/priv/ssl/rest_cert.pem\" \\\n  -e PUSH_HTTPS_KEYFILE=\"/opt/app/priv/ssl/rest_key.pem\" \\\n  -e PUSH_APNS_ENABLED=true \\\n  -e PUSH_FCM_ENABLED=true \\\n  -it --rm mongooseim/mongoose-push:2.1.2\n```","ref":"2-1-1_2-1-2.html#example"}],"content_type":"text/markdown","proglang":"elixir","producer":{"name":"ex_doc","version":"0.38.1"}}